{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { TextField, Button, Typography, Paper } from '@material-ui/core';\n// import { useDispatch, useSelector } from 'react-redux';\n// import FileBase from 'react-file-base64';\n// import { useNavigate } from 'react-router-dom';\n// import ChipInput from 'material-ui-chip-input';\n// import { createPost, updatePost } from '../../actions/posts';\n// import useStyles from './styles';\n// const Form = ({ currentId, setCurrentId }) => {\n//   const [postData, setPostData] = useState({ title: '', message: '', tags: [], selectedFile: '' });\n//   const post = useSelector((state) => (currentId ? state.posts.posts.find((message) => message._id === currentId) : null));\n//   const dispatch = useDispatch();\n//   const classes = useStyles();\n//   const user = JSON.parse(localStorage.getItem('profile'));\n//   const navigate = useNavigate();\n//   const clear = () => {\n//     setCurrentId(0);\n//     setPostData({ title: '', message: '', tags: [], selectedFile: '' });\n//   };\n//   useEffect(() => {\n//     if (!post?.title) clear();\n//     if (post) setPostData(post);\n//   }, [post]);\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (currentId === 0) {\n//       dispatch(createPost({ ...postData, name: user?.result?.name }, navigate));\n//       clear();\n//     } else {\n//       dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\n//       clear();\n//     }\n//   };\n//   if (!user?.result?.name) {\n//     return (\n//       <Paper className={classes.paper} elevation={6}>\n//         <Typography variant=\"h6\" align=\"center\">\n//           Please Sign In to create your own memories and like other's memories.\n//         </Typography>\n//       </Paper>\n//     );\n//   }\n//   const handleAddChip = (tag) => {\n//     setPostData({ ...postData, tags: [...postData.tags, tag] });\n//   };\n//   const handleDeleteChip = (chipToDelete) => {\n//     setPostData({ ...postData, tags: postData.tags.filter((tag) => tag !== chipToDelete) });\n//   };\n//   return (\n//     <Paper className={classes.paper} elevation={6}>\n//       <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n//         <Typography variant=\"h6\">{currentId ? `Editing \"${post?.title}\"` : 'Creating a Memory'}</Typography>\n//         <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n//         <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n//         <div style={{ padding: '5px 0', width: '94%' }}>\n//           <ChipInput\n//             name=\"tags\"\n//             variant=\"outlined\"\n//             label=\"Tags\"\n//             fullWidth\n//             value={postData.tags}\n//             onAdd={(chip) => handleAddChip(chip)}\n//             onDelete={(chip) => handleDeleteChip(chip)}\n//           />\n//         </div>\n//         <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\n//         <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n//         <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n//       </form>\n//     </Paper>\n//   );\n// };\n// export default Form;","map":{"version":3,"sources":["/home/arokee/React_JS/mern-memo-app/client/src/components/Form/Form.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { TextField, Button, Typography, Paper } from '@material-ui/core';\n// import { useDispatch, useSelector } from 'react-redux';\n// import FileBase from 'react-file-base64';\n// import { useNavigate } from 'react-router-dom';\n// import ChipInput from 'material-ui-chip-input';\n\n// import { createPost, updatePost } from '../../actions/posts';\n// import useStyles from './styles';\n\n// const Form = ({ currentId, setCurrentId }) => {\n//   const [postData, setPostData] = useState({ title: '', message: '', tags: [], selectedFile: '' });\n//   const post = useSelector((state) => (currentId ? state.posts.posts.find((message) => message._id === currentId) : null));\n//   const dispatch = useDispatch();\n//   const classes = useStyles();\n//   const user = JSON.parse(localStorage.getItem('profile'));\n//   const navigate = useNavigate();\n\n//   const clear = () => {\n//     setCurrentId(0);\n//     setPostData({ title: '', message: '', tags: [], selectedFile: '' });\n//   };\n\n//   useEffect(() => {\n//     if (!post?.title) clear();\n//     if (post) setPostData(post);\n//   }, [post]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (currentId === 0) {\n//       dispatch(createPost({ ...postData, name: user?.result?.name }, navigate));\n//       clear();\n//     } else {\n//       dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\n//       clear();\n//     }\n//   };\n\n//   if (!user?.result?.name) {\n//     return (\n//       <Paper className={classes.paper} elevation={6}>\n//         <Typography variant=\"h6\" align=\"center\">\n//           Please Sign In to create your own memories and like other's memories.\n//         </Typography>\n//       </Paper>\n//     );\n//   }\n\n//   const handleAddChip = (tag) => {\n//     setPostData({ ...postData, tags: [...postData.tags, tag] });\n//   };\n\n//   const handleDeleteChip = (chipToDelete) => {\n//     setPostData({ ...postData, tags: postData.tags.filter((tag) => tag !== chipToDelete) });\n//   };\n\n//   return (\n//     <Paper className={classes.paper} elevation={6}>\n//       <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n//         <Typography variant=\"h6\">{currentId ? `Editing \"${post?.title}\"` : 'Creating a Memory'}</Typography>\n//         <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n//         <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n//         <div style={{ padding: '5px 0', width: '94%' }}>\n//           <ChipInput\n//             name=\"tags\"\n//             variant=\"outlined\"\n//             label=\"Tags\"\n//             fullWidth\n//             value={postData.tags}\n//             onAdd={(chip) => handleAddChip(chip)}\n//             onDelete={(chip) => handleDeleteChip(chip)}\n//           />\n//         </div>\n//         <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\n//         <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n//         <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n//       </form>\n//     </Paper>\n//   );\n// };\n\n// export default Form;\n"]},"metadata":{},"sourceType":"module"}