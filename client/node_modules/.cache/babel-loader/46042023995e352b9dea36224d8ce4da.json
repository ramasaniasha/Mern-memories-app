{"ast":null,"code":"import { FETCH_ALL, FETCH_POST, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nexport default ((posts = [], action) => {\n  switch (action.type) {\n    case FETCH_ALL:\n      return action.post;\n\n    case FETCH_POST:\n      return action.payload;\n\n    case LIKE:\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n\n    case CREATE:\n      return [...posts, action.payload];\n\n    case UPDATE:\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n\n    case DELETE:\n      return posts.filter(post => post._id !== action.payload);\n\n    default:\n      return posts;\n  }\n});","map":{"version":3,"sources":["/home/arokee/React_JS/mern-memo-app/client/src/reducers/posts.js"],"names":["FETCH_ALL","FETCH_POST","CREATE","UPDATE","DELETE","LIKE","posts","action","type","post","payload","map","_id","filter"],"mappings":"AAAA,SAASA,SAAT,EAAmBC,UAAnB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+CC,MAA/C,EAAuDC,IAAvD,QAAmE,0BAAnE;AAEA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,SAAL;AACE,aAAOO,MAAM,CAACE,IAAd;;AACF,SAAKR,UAAL;AACE,aAAOM,MAAM,CAACG,OAAd;;AAEF,SAAKL,IAAL;AACE,aAAOC,KAAK,CAACK,GAAN,CAAWF,IAAD,IAAWA,IAAI,CAACG,GAAL,KAAaL,MAAM,CAACG,OAAP,CAAeE,GAA5B,GAAkCL,MAAM,CAACG,OAAzC,GAAmDD,IAAxE,CAAP;;AACF,SAAKP,MAAL;AACE,aAAO,CAAC,GAAGI,KAAJ,EAAWC,MAAM,CAACG,OAAlB,CAAP;;AACF,SAAKP,MAAL;AACE,aAAOG,KAAK,CAACK,GAAN,CAAWF,IAAD,IAAWA,IAAI,CAACG,GAAL,KAAaL,MAAM,CAACG,OAAP,CAAeE,GAA5B,GAAkCL,MAAM,CAACG,OAAzC,GAAmDD,IAAxE,CAAP;;AACF,SAAKL,MAAL;AACE,aAAOE,KAAK,CAACO,MAAN,CAAcJ,IAAD,IAAUA,IAAI,CAACG,GAAL,KAAaL,MAAM,CAACG,OAA3C,CAAP;;AACF;AACE,aAAOJ,KAAP;AAfJ;AAiBD,CAlBD","sourcesContent":["import { FETCH_ALL,FETCH_POST, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\n\nexport default (posts = [], action) => {\n  switch (action.type) {\n    case FETCH_ALL:\n      return action.post;\n    case FETCH_POST:\n      return action.payload;\n      \n    case LIKE:\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n    case CREATE:\n      return [...posts, action.payload];\n    case UPDATE:\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n    case DELETE:\n      return posts.filter((post) => post._id !== action.payload);\n    default:\n      return posts;\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}